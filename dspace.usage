dspace bitstore-migrate
  "Migrate all files (bitstreams) from one assetstore (bitstore) to another"
  (<BITSTORE-MIGRATE-OPTION> ...) ;
<BITSTORE-MIGRATE-OPTION> ::=
  ((--source || -a) <ASSET-STORE>) "Source assetstore store_number (to lose content)"
| ((--destination || -b) <ASSET-STORE>) "Destination assetstore store_number (to gain content)"
| (--delete || -d) "Delete file from losing assetstore. (Default: Keep bitstream in old assetstore)"
| (--help || -h) "Help"
| (--print || -p) "Print out current assetstore information"
| ((--size || -s) <SIZE>) "Batch commit size. (Default: 1, commit after each file transfer)"
;


dspace checker
  "Run the checksum checker"
  (<CHECKER-OPTION> ...) ;
<CHECKER-OPTION> ::=
  (--continuous || -L) "Loop continuously through the bitstreams"
| (--looping || -l) "Loop once through bitstreams"
| ((--handle || -a) <HANDLE>) "Specify a handle to check"
| (-b <BITSTREAM-IDS>) "Space separated list of bitstream IDs"
| (--count || -c) "Check count"
| (--duration || -d) "Checking duration"
| ((--prune || -p) <PATH>) "Prune old results"
| (--verbose || -v) "Report all processing"
| (--help || -h) "Help"
;


# checker-emailer long options are really weird. (i don’t think the
# person who implemented them really understood them.) only complete the
# short ones
dspace checker-emailer (<CHECKER-EMAILER-OPTION> ...) ;
<CHECKER-EMAILER-OPTION> ::=
  -a "Send all the results"
| -d "Send E-mail report for all bitstreams set as deleted for today"
| -m "Send E-mail report for all bitstreams not found in assetstore for today"
| -c "Send E-mail report for all bitstreams where checksum has been changed for today"
| -u "Send the Unchecked bitstream report"
| -n "Send E-mail report for all bitstreams set to longer be processed for today"
| -h "Help"
;


dspace classpath "Calculate and display the DSpace classpath" ;


dspace cleanup "Remove deleted bitstreams from the assetstore" ;


dspace community-filiator
  "Tool to manage community and sub-community relationships"
  (<COMMUNITY-FILIATOR-OPTION> ...) ;
<COMMUNITY-FILIATOR-OPTION> ::=
  (--set || -s) "Set a parent/child relationship"
| (--remote || -r) "Remove a parent/child relationship"
| ((--child || -c) <HANDLE-OR-ID>) "Child community"
| ((--parent || -p) <HANDLE-OR-ID>) "Parent community"
| (--help || -h) "Help"
;


dspace create-administrator
  "Create a DSpace administrator account"
  (<CREATE-ADMINISTRATOR-OPTION> ...) ;
<CREATE-ADMINISTRATOR-OPTION> ::=
  ((--language || -c) <LANGUAGE>) "Administrator language"
| ((--email || -e) <EMAIL>) "Administrator email address"
| ((--first || -f) <NAME>) "Administrator first name"
| ((--last || -l) <NAME>) "Administrator last name"
| ((--password || -p) <PASSWORD>) "Administrator password"
| (--help || -h) "Help"
;


dspace curate
  "Perform curation tasks on DSpace objects"
  (<CURATE-OPTION> ...) ;
<CURATE-OPTION> ::=
  ((--eperson || -e) <EMAIL>) "Email address of curating eperson"
| ((--id || -i) <HANDLE>) "Id (handle) of object to perform task on, or 'all' to perform on whole repository"
| ((--parameter || -p) <ARG>) "A task parameter 'NAME=VALUE'"
| ((--queue || -q) <QUEUE>) "Name of task queue to process"
| ((--reporter || -r) <PATH>) "Path to desired report file"
| ((--scope || -s) (object | curation | open)) "Transaction scope to impose"
| ((--task || -t) (noop | profileformats | requiredmetadata | checklinks | registerdoi)) "Curation task name"
| ((--taskfile || -T) <PATH>) "File containing curation task names"
| (--verbose || -v) "Report activity to stdout"
| (--help || -h) "Help"
;

dspace database test "Performs a test connection to database to validate connection settings" ;
dspace database (info | status) "Describe basic info/status about database, including validating the compatibility of this database" ;
dspace database migrate "Migrate the database to the latest version" ;
dspace database repair "Attempt to repair any previously failed database migrations or checksum mismatches" ;
dspace database skip <VERSION> "Skip a single, pending or ignored migration, ensuring it never runs" ;
dspace database validate "Validate current database's migration status" ;
dspace database update-sequences "Update database sequences after running AIP ingest" ;
dspace database clean "DESTROY all data and tables in database (WARNING there is no going back!)" ;


dspace doi-organiser
  "Transmit information about DOIs to the registration agency"
  (<DOI-ORGANISER-OPTION> ...) ;
<DOI-ORGANISER-OPTION> ::=
  (--delete-all || -d) "Perform online deletion for all identifiers queued for deletion"
| (--delete-doi <DOI>) "Delete a specified identifier"
| (--filter <FILTER-NAME>) "Use the specified filter name instead of the provider's filter"
| (--list || -l) "List all objects to be reserved, registered, deleted or updated"
| (--quiet || -q) "Turn the command line output off"
| (--register-all || -r) "Perform online registration for all identifiers queued for registration"
| (--register-doi <DOI-OR-HANDLE-OR-ID>) "Register a specified identifier"
| (--reserve-doi <DOI-OR-HANDLE-OR-ID>) "Reserve a specified identifier online"
| (--reserve-all || -s) "Perform online reservation for all identifiers queued for reservation"
| (--update-all || -u) "Perform online metadata update for all identifiers queued for metadata update"
| (--update-doi <DOI-OR-HANDLE-OR-ID>) "Update online an object"
| (--help || -h) "Help"
;


dspace dsprop
  "Display the value of a DSpace configuration property"
  (<DSPROP-OPTION> ...) ;
<DSPROP-OPTION> ::=
  (--first || -f) "Display only the first value of an array property"
| ((--module || -m) <MODULE>) "Name of the module in which property exists"
| ((--property || -p) <PROPERTY>) "Name of the desired property"
| (--raw || -r) "Do not do property substitution on the value"
| ((--help) | (-? || -h)) "Help"
;


# leaving dsrun out as it’s mostly a development tool
# dspace dsrun <CLASS-NAME>? ;


# leaving embargo-lifter out as it’s deprecated


dspace export
  "Export items or collections"
  (<EXPORT-OPTION> ...) ;
<EXPORT-OPTION> ::=
  ((--type || -t) (ITEM | COLLECTION)) "Type of export"
| ((--id || -i) <HANDLE-OR-ID>) "ID or handle of thing to export"
| (--migrate || -m) "Export for migration"
| ((--number || -n) <NUMBER>) "Sequence number to begin exporting items with"
| (--exclude-bitstreams || -x) "Do not export bitstreams"
| ((--zip || -z) <PATH>) "Export as zip file to path"
| (--help || -h) "Help"
;


dspace filter-media
  "Perform the media filtering to extract full text from documents and to create thumbnails"
  (<FILTER-MEDIA-OPTION> ...) ;
<FILTER-MEDIA-OPTION> ::=
  (--force || -f) "Force all bitstreams to be processed"
| ((--identifier || -i) <HANDLE>) "Only process bitstreams belonging to the provided handle"
| ((--maximum || -m) <NUMBER>) "Process no more than maximum items"
| ((--plugins || -p) <PLUGIN>) "Only run the specified Media Filter plugins (comma separated)"
| (--quiet || -q) "Do not print anything except in the event of errors"
| ((--skip || -s) <ID>) "Skip bitstreams belonging to the identifier(s), comma separated"
| (--help || -h) "Help"
;


dspace generate-sitemaps
  "Generate search engine and html sitemaps"
  (<GENERATE-SITEMAPS-OPTION> ...) ;
<GENERATE-SITEMAPS-OPTION> ::=
  (--no_htmlmap || -b) "Do not generate a basic HTML sitemap"
| (--delete || -d) "Delete sitemaps dir and its contents"
| (--no_sitemaps || -s) "Do not generate sitemaps.org protocol sitemap"
| (--help || -h) "Help"
;


dspace harvest
  "Manage the OAI-PMH harvesting of external collections"
  (<HARVEST-OPTION> ...) ;
<HARVEST-OPTION> ::=
  ((--address || -a) <URL>) "Address of the OAI-PMH server"
| ((--collection || -c) <HANDLE-OR-ID>) "Harvesting collection"
| ((--eperson || -e) <EMAIL>) "Email address of the Eperson"
| (--ping || -g) "Test the OAI server and set"
| ((--oai_set_id || -i) <PMH-SET-ID>) "Id of the PMH set for the harvested collection"
| ((--metadata_format || -m) <FORMAT>) "Name of the desired metadata format for harvesting"
| (--reimport || -o) "Reimport all items in the collection (equivalent to -p -r)"
| (--purge || -p) "Delete all items in the collection"
| (--purgeCollections || -P) "Purge all harvestable collections"
| (--run || -r) "Run the standard harvest procedure"
| (--reset || -R) "Reset harvest status on all collections"
| (--setup || -s) "Set the collection up for harvesting"
| (--start || -S) "Start the harvest loop"
| ((--type || -t) (0 "No harvesting" | 1 "Metadata only" | 2 "Metadata and bitstream references" | 3 "Metadata and bitstreams")) "Type of harvesting"
| (--help || -h) "Help"
;


dspace import
  "Import items or collections"
  (<IMPORT-OPTION> ...) ;
<IMPORT-OPTION> ::=
  (--add || -a) "Add items to DSpace"
| ((--collection || -c) <HANDLE-OR-ID>) "Destination collection(s)"
| ((--delete || -d)) "Delete items listed in mapfile"
| ((--eperson || -e) <EMAIL>) "Email address of eperson doing the importing"
| ((--mapfile || -m) <PATH>) "Mapfile for items"
| (--notify || -n) "Send notification emails"
| (--template || -p) "Apply the collection template"
| (--quiet || -q) "Don't display metadata"
| (--replace || -r) "Replace items listed in mapfile"
| (--resume || -R) "Resume a failed import"
| ((--source || -s) <PATH>) "Source of items"
| ((--url || -u) <URL>) "URL of zip file"
| (--validate || -v) "Test run (do not actually import items)"
| (--workflow || -w) "Send submission through collection's workflow"
| (--exclude-bitstreams || -x) "Do not load or expect content bitstreams"
| ((--zip || -z) <PATH>) "Name of zip file"
| (--help || -h) "Help"
;


dspace index-authority "Import authorities and keep SOLR authority index up to date" ;


dspace index-discovery
  "Update Discovery (Solr) search and browse Index"
  (<INDEX-DISCOVERY-OPTION> ...) ;
<INDEX-DISCOVERY-OPTION> ::=
  (--build || -b) "(Re)build index, wiping out current one if it exists"
| (--clean || -c) "Clean existing index, removing documents no longer in the DB"
| (--delete || -d) "Delete all records from existing index"
| (--force || -f) "If updating existing index, force each handle to be reindexed even if up-to-date"
| ((--index || -i) <HANDLE-OR-ID>) "Add or update object (handle or UUID)"
| ((--remove || -r) <HANDLE-OR-ID>) "Remove an object (handle or UUID)"
| (--spellchecker || -s) "Rebuild the spellchecker"
| ((--type || -t) (ClaimedTask | Collection | Community | Item | PoolTask | XmlWorkflowItem | WorkspaceItem | MetadataField | LDNMessageEntity))
    "Reindex only specific type of indexable object"
| (--help || -h) "Help"
;


dspace itemupdate
  "Item update tool for altering metadata and bitstream content in items"
  (<ITEMUPDATE-OPTION> ...) ;
<ITEMUPDATE-OPTION> ::=
  ((--addmetadata || -a) <METADATA>) "Add metadata specified for each item (semicolon separated)"
| (--addbitstreams || -A) "Add bitstreams as specified for each item"
| ((--deletemetadata || -d) <METADATA>) "Delete metadata specified for each item"
| ((--deletebitstreams || -D) <BITSTREAM-FILTER>) "Delete bitstreams as specified for each item"
| ((--eperson || -e) <EMAIL>) "Email address of eperson doing the update"
| ((--filter-properties || -F) <CLASS-NAME>) "Filter class name (only for deleting bitstream)"
| ((--itemfield || -i) <METADATA>) "Metadata field containing item identifier (default: dc.identifier.uri)"
| (--provenance || -P) "Suppress altering provenance field for bitstream changes"
| ((--source || -s) <PATH>) "Root directory of source DSpace archive"
| (--test || -t) "Test run (do not actually import items)"
| (--verbose || -v) "Verbose logging"
| (--help || -h) "Help"
;


dspace make-handle-config "Run the handle server simple setup command" ;


dspace metadata-export
  "Export metadata for batch editing"
  (<METADATA-EXPORT-OPTION> ...) ;
<METADATA-EXPORT-OPTION> ::=
  (--all || -a) "Include all metadata fields that are not normally changed (e.g. provenance)"
| ((--file || -f) <PATH>) "Destination to write the file"
| ((--id || -i) <HANDLE-OR-ID>) "ID or handle of thing to export (item, collection, or community)"
| ((--output-format || -o) (csv | bibtex | ris)) "Output format of metadata"
| (--help || -h) "Help"
;


dspace metadata-import
  "Import metadata after batch editing"
  (<METADATA-IMPORT-OPTION> ...) ;
<METADATA-IMPORT-OPTION> ::=
  ((--email || -e) <EMAIL>) "Email address or user ID of user (required if adding new items)"
| ((--file || -f) <PATH>) "Source file"
| (--notify || -n) "Send notification emails on new items using workflow"
| (--silent || -s) "Silent operation (use with caution)"
| (--template || -t) "When adding items, use the collection template"
| (--validate-only || -v) "Just validate the CSV, don't run the import"
| (--workflow || -w) "When adding items, use the collection workflow"
| (--help || -h) "Help"
;


dspace migrate-embargo
  "Embargo manager tool used to migrate old version of Embargo to the new one included in dspace3"
  (<MIGRATE-EMBARGO-OPTION> ...) ;
<MIGRATE-EMBARGO-OPTION> ::=
  (--adjust || -a) "Adjust bitstreams policies"
| (--check || -c) "Do not lift any embargoes, only check status of embargoed items"
| ((--id || -i) <HANDLE-OR-ID>) "Process only these items (by ID)"
| (--list || -l) "Only lift embargoes, do not check the status"
| (--dryrun || -n) "Do not change anything, print messages instead"
| (--quiet || -q) "Do not print anything except for errors"
| (--verbose || -v) "Print a line describing action taken for each embargoed Item found"
| (--help || -h) "Help"
;


dspace oai
  "OAI Manager Script"
  ( import "Import DSpace items into OAI index and cache system"
  | clean-cache "Clean the OAI cached responses"
  )
  ( -c "Clear index (import only)"
  | -v "Verbose output"
  | -h "Help"
  )
;

dspace packager
  "Execute a packager"
  (<PACKAGER-OPTION> ...) <PATH> ;
<PACKAGER-OPTION> ::=
  (--all || -a) "Also recursively ingrest any child packages (e.g. all items in collection)"
| (--disseminate || -d) "Disseminate package (output)"
| ((--eperson || -e) <EMAIL>) "Email address of the eperson doing importing"
| (--force-replace || -f) "Replace already existing objects found during a restore (-r) instead of error"
| ((--identifier || -i) <HANDLE-OR-ID>) "Object to disseminate"
| (--keep-existing || -k) "Keep already existing objects found during a restore (-r) instead of error"
| ((--option || -o) <OPTION>) "Packager option to pass to plugin, name=value"
| ((--parent || -p) <HANDLE-OR-ID>) "Handle of parent community or collection to ingest object"
| (--restore || -r) "Ingest in restore mode; restore missing object based on package contents"
| (--submit || -s) "Submission package (input)"
| (--type || -t) "Package type or MIME type"
| (--no-user-interaction || -u) "Skip over user interaction"
| (--install || -w) "Disable workflow; install immediately without going through collection's workflow"
| (--help || -h) "Help"
;


dspace process-cleaner
  "Delete old Processes from the system"
  (<PROCESS-CLEANER-OPTION> ...) ;
<PROCESS-CLEANER-OPTION> ::=
  (--completed || -c) "Delete process with completed status (default)"
| (--failed || -f) "Delete process with failed status"
| (--runing || -r) "Delete process with running status"
| (--help || -h) "Help"
;

dspace rdfizer
  "Tool to convert contents to RDF"
  (<RDFIZER-OPTION> ...) ;
<RDFIZER-OPTION> ::=
  (--convert-all || -c) "Convert all DSpace Objects that are readable anonymously"
| (--delete <HANDLE-OR-URL>) "Delete previously converted data"
| (--delete-all) "Delete all converted data from the triplestore"
| ((--identifiers || -i) <HANDLE>) "Only convert these Objects"
| (--dry-run || -n) "Don't send any commands or data to the triplestore"
| (--stdout || -o) "Print all converted data to stdout as turtle"
| (--verbose || -v) "Print verbose information to stderr while converting"
| (--help || -h) "Help"
;


dspace read "Execute a stream of commands from a file or pipe" <PATH> ;


dspace registry-loader
  "Load entries into a registry"
  (-bitstream | -metadata) <PATH> ;


dspace structure-builder
  "Build DSpace community and collection structure"
  (<STRUCTURE-BUILDER-OPTION> ...) ;
<STRUCTURE-BUILDER-OPTION> ::=
  -k # not documented :-/
| (--export || -x) "Export the current structure as XML"
| ((--eperson || -e) <EMAIL>) "Email address of the eperson doing the operation"
| ((--output || -o) <PATH>) "Output XML file"
| (-f <PATH>) "Source XML file"
| (--help | -? || -h) "Help"
;


# not documented :-/
# dspace sub-daily ;


# not documented :-/
# dspace test-email ;


dspace update-handle-prefix "Update handle records and metadata when moving from one Handle prefix to another"
  <HANDLE> <HANDLE> ;


dspace user
  "Create, List, Update, Delete EPerson (user) records"
  (<USER-OPTION> ...) ;
<USER-OPTION> ::=
  (--add || -a) "Create a new EPerson"
| (--delete || -d) "Delete an existing EPerson"
| (--list || -l) "List EPersons"
| (--modify || -M) "Modify an EPerson"
| ((--email || -m) <EMAIL>) "Email address for the EPerson (existing, if modifying)"
| ((--netid || -n) <NETID>) "netid (e.g. from an external directory service; existing, if modifying)"
| ((--password || -p) <PASSWORD>) "Password of the created EPerson"
| ((--givenname || -g) <NAME>) "First or given name of the EPerson"
| ((--surname || -s) <NAME>) "Last or surname of the EPerson"
| ((--telephone || -t) <TELEPHONE>) "Telephone number for the EPerson"
| ((--language # || -l ### commented out because it conflicts with -l for list
   ) <LANGUAGE>) "Preferred language for the EPerson"
| (--requireCertificate || -c) "Require X.509 certificate"
| (--canLogin || -C) "Enable or disable account"
| ((--newEmail || -i) <EMAIL>) "New email address for modifying EPerson"
| ((--newNetid || -I) <NETID>) "New netid for modifying EPerson"
| ((--newPassword || -w) <PASSWORD>) "New password for modifying EPerson"
| (--help || -h) "Help"


dspace validate-date "Test date-time format rules" <DATE> ;


dspace version "Show DSpace version and other troubleshooting information" ;


# TODO: commands that aren’t documented on the main wiki page for the CLI:
# anonymize-statistics
# bulk-access-control
# healthcheck
# iiif-canvas-dimensions
# import-openaire-events
# import-openaire-suggestions
# initialize-entities
# metadata-deletion
# metadata-export-search
# orcid-bulk-push
# retry-tracker
# retry-tracker
# sru-import
# submission-forms-migrate
# subscription-send

# TODO: SOLR commands:
# solr-database-resync
# solr-export-statistics
# solr-import-statistics
# solr-reindex-statistics
# solr-upgrade-statistics
# solr-upgrade-statistics-6x
# stats-log-converter
# stats-log-importer
# stats-util

# TODO: statistics commands:
# stat-general
# stat-initial
# stat-monthly
# stat-report-general
# stat-report-initial
# stat-report-monthly
